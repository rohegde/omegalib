/********************************************************************************************************************** 
 * THE OMEGA LIB PROJECT
 *---------------------------------------------------------------------------------------------------------------------
 * Copyright 2010								Electronic Visualization Laboratory, University of Illinois at Chicago
 * Authors:										
 *  Alessandro Febretti							febret@gmail.com
 *  [PLACE YOUR NAME AND MAIL HERE IF YOU CONTRIBUTED TO WRITE THIS SOURCE FILE]
 *---------------------------------------------------------------------------------------------------------------------
 * [LICENSE NOTE]
 *---------------------------------------------------------------------------------------------------------------------
 * [SUMMARY OF FILE CONTENTS]
 *********************************************************************************************************************/
#ifndef __INPUT_EVENT_H__
#define __INPUT_EVENT_H__

#include <vector>
#include "osystem.h"
#include "InputService.h"

namespace omega
{

//will be used to store point data for the markers that make up MoCap rigid bodies
struct Point
{
	float x;
	float y;
	float z;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct InputEvent
{
	// Supported event types.
	enum Type 
	{ 
		//! Move: Generated whenever the source of an event moves.
		Move, 
		//! Down: generated when the source of an event goes to a logical 'down' state (i.e. touch on a surface or 
		//! a mouse button press count as Down events)
		Down, 
		//! Up: generated when the source of an event goes to a logical 'up' state (i.e. remove touch from a surface or 
		//! a mouse button release count as Up events)
		Up, 
		//! Trace: generated when a new object is identified by the device managed by the input service 
		//! (i.e head tracking, or a mocap system rigid body).
		Trace, 
		//! Trace: generated when a traced object is lost by the device managed by the input service 
		//! (i.e head tracking, or a mocap system rigid body).
		Untrace,

		//! Click: generated on a down followed by an immediate up event.
		//! parameters: position
		Click,
		//! DoubleClick: generated by a sequence of quick down/up/down/up events.
		//! parameters: position.
		DoubleClick,
		//! MoveLeft: generated when the source of event goes toward the left of the screen.
		//! parameters: position.
		MoveLeft,
		//! MoveRight: generated when the source of event goes toward the right of the screen.
		//! parameters: position.
		MoveRight,
		//! MoveUp: generated when the source of event goes toward the top of the screen.
		//! parameters: position.
		MoveUp,
		//! MoveDown: generated when the source of event goes toward the bottom of the screen.
		//! parameters: position.
		MoveDown,
		//! SplitStart: generated at the start of a split/zoom gesture.
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
		SplitStart,
		//! SplitEnd: generated at the end of a split/zoom gesture.
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
		SplitEnd,
		//! Split: generated during a split/zoom gesture. 
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions), value[0] (delta distance) value[1] (delta ratio) .
		Split,
		//! RotateStart: generated at the start of a rotation gesture.
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
		RotateStart,
		//! RotateEnd: generated at the end of a rotation gesture.
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions) .
		RotateEnd,
		//! Rotate: generated when an event source is stationary while a second source is rotating around the first.
		//! parameters: position (center of gesture) pointSet[0, 1] (individual finger positions), rotation[0] (degrees).
		Rotate,
	};

	static const int PointSetSize = 32;

	// id of the source of this event. Input services associate unique ids to each of their event sources.
    unsigned int sourceId;
	
	// Type of the service that generated this event.
	enum InputService::ServiceType serviceType;

	// Unique id of the service that generated this event.
	int serviceId;

	// The event type.
    enum Type type;

	// Event flags.
	unsigned int flags;

	// Event timestamp.
	unsigned int timestamp;

	// Position 
	Vector3f position;

	// Rotation.
	Vector4f rotation;

	// Vector storing additional event parameters (i.e. split distance / ratio for Split events)
	Vector3f value;

	// Point set
	int numberOfPoints;
	Vector3f pointSet[PointSetSize];

	// NOTE: event serialization services are used only in clustered / multidisplay systems.
	// If display system building is disabled, this code can be safely excluded.
	// Right now, event serialization for NetService / oinputserver and display system
	// serialization (this) are implemented as separate facilities. We may think of joining them
	// sometime in the future.
	// ALso, this feature relies on Equalizer deta streams, so it is enabled only for builds
	// that support equalizer.
#ifdef OMEGA_USE_DISPLAY_EQUALIZER
	//! Serialize an InputEvent instance.
    void serialize(co::DataOStream& os)
	{
		os << sourceId;
		os << serviceType;
		os << type;
		os << flags;
		os << timestamp;
		os << position[0] << position[1] << position[2];
		os << rotation[0] << rotation[1] << rotation[2];
		os << numberOfPoints;
		for(int i = 0; i < PointSetSize; i++)
		{
			os << pointSet[i][0] << pointSet[i][1] << pointSet[i][2];
		}
	}

	//! Deserialize an InputEvent instance.
    void deserialize( co::DataIStream& is)
	{
		is >> sourceId;
		is >> serviceType;
		is >> type;
		is >> flags;
		is >> timestamp;
		is >> position[0] >> position[1] >> position[2];
		is >> rotation[0] >> rotation[1] >> rotation[2];
		is >> numberOfPoints;
		for(int i = 0; i < PointSetSize; i++)
		{
			is >> pointSet[i][0] >> pointSet[i][1] >> pointSet[i][2];
		}
	}
#endif
};

}; // namespace omega

#endif