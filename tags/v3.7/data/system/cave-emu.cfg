// A 4-sided cave example
// This example creates separate windows for a 4-sided cave (laft, right, front, back), plus a separate operator window.
// The operator window accepts keyboard and mouve input to control the application.
config:
{
	display:
	{
		// We use a custom configuration - we want to specify each tile position and orientation
		type = "Equalizer";
		geometry = "ConfigCustom";
		
		//referenceTile = [0, 0];
		//referenceOffset = [-0.5, 2.0, -2.0];
		
		// Default tile size in meters
		tileSize = [3.0, 2.5];
		// Default tile resolution
		tileResolution = [384, 320];
		
		// Offset of the windows on the desktop
		windowOffset = [50, 50];
		
		// Uncomment these lines for interleaved stereo.
		//stereoMode = "Interleaved";
		//enableStencilInterleaver = true;

		tiles:
		{
			// All tiles run on the local node.
			local:
			{
				// Operator window
				operator:  
				{ 
					device = 0; // Run on GPU 0
					center = [ 0, 2, -2];
					yaw = 0;
					// Offset applied to mouse coordinates
					offset = [0, 0];
					// Window position
					position = [0, 500];
					// Tile resolution
					resolution = [854, 480];
					// Tile size in meters
					size = [2.0, 1.12];
					enabled = true;
				};
				
				// CAVE sides.
				// NOTE: for these ones we don't specify tile resolution and size: the global ones from the 
				// display section will be used.
				win-left:  
				{ 
					device = 0; 
					center = [ -1.5, 1.25, 0.0];
					yaw = -90;
					offset = [0, 0];
					position = [0, 0];
					enabled = true;
					disableMouse = true;
				};
				win-front: 
				{ 
					device = 0; 
					center = [ 0.0, 1.25, -1.5];
					yaw = 0;
					offset = [384, 0];
					position = [384, 0];
					enabled = true;
					disableMouse = true;
				};
				
				win-right: 
				{ 
					device = 1; // Run on GPU 1
					center = [ 1.5, 1.25, 0.0];
					yaw = 90;
					offset = [768, 0];
					position = [768, 0];
					enabled = true;
					disableMouse = true;
				};
				win-back:  
				{ 
					device = 1; 
					center = [ 0.0, 1.25, 1.5];
					yaw = 180;
					offset = [1152, 0];
					position = [1152, 0];
					enabled = true;
					disableMouse = true;
				};
			};
		};
	};
	// Input services: Add a keyboard and mouse.
	input:
	{
		MouseService: {};
        KeyboardService: {};
	};
	// Default font for on-screen console (TAB to toggle)
	console:
	{
		font:
		{
			filename = "fonts/segoeuimod.ttf";
			size = 18;
		};
	};
	// Default font for everything else.
	defaultFont:
	{
		filename = "fonts/segoeuimod.ttf";
		size = 24;
	};
	// Camera options
	camera:
	{
		// FPS style Use keyboard + mouse navigation (left mouse button to rotate view, WASD + RF to navigate)
		controller ="KeyboardMouse";
		// Offset of HEAD wrt camera origin
		headOffset = [ 0.0,  2.0,  0.0 ];
	};
	// Default style for interactors
	interactor:	
	{
		style = "Mouse";
	};
	// User interface stuff.
	ui:
	{
		//gamepadInteractionEnabled = false;
		gamepadInteractionEnabled = true;
		pointerInteractionEnabled = true;
		menu3dEnabled =true;
		menuRayPlaceEnabled = true;
		menuDefaultPosition = [-0.98, 0.2, 1.0];
		menuDefaultScale = 2.5;
		menuToggleButton = "Button3"; // mouse middle button
		clickButton="Button1"; // mouse left button
		confirmButton="Button4"; // keyboard enter
		cancelButton="Button5"; // keyboard backspace
	};
	// Enable python interactive console
	pythonShellEnabled = true;
	// Draw pointers
	drawPointers = true;
	// Enable mission control server - programs can send commands to this instance through a mission control connection
	missionControl:
	{
		serverEnabled = true;
	};
	// Application drawer options (used by orun for runtime application switching)
	appDrawer:
	{
		appDrawerToggleButton="Button7"; // Keyboard HOME button
	};
};