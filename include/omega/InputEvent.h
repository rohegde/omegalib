/********************************************************************************************************************** 
 * THE OMEGA LIB PROJECT
 *---------------------------------------------------------------------------------------------------------------------
 * Copyright 2010								Electronic Visualization Laboratory, University of Illinois at Chicago
 * Authors:										
 *  Alessandro Febretti							febret@gmail.com
 *  [PLACE YOUR NAME AND MAIL HERE IF YOU CONTRIBUTED TO WRITE THIS SOURCE FILE]
 *---------------------------------------------------------------------------------------------------------------------
 * [LICENSE NOTE]
 *---------------------------------------------------------------------------------------------------------------------
 * [SUMMARY OF FILE CONTENTS]
 *********************************************************************************************************************/
#ifndef __INPUT_EVENT_H__
#define __INPUT_EVENT_H__

#include <vector>
#include "osystem.h"
#include "InputService.h"

namespace omega
{

//will be used to store point data for the markers that make up MoCap rigid bodies
struct Point
{
	float x;
	float y;
	float z;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct InputEvent
{
	// Supported event types.
	enum Type 
	{ 
		//! Move: Generated whenever the source of an event moves.
		Move, 
		//! Down: generated when the source of an event goes to a logical 'down' state (i.e. touch on a surface or 
		//! a mouse button press count as Down events)
		Down, 
		//! Up: generated when the source of an event goes to a logical 'up' state (i.e. remove touch from a surface or 
		//! a mouse button release count as Up events)
		Up, 
		//! Trace: generated when a new object is identified by the device managed by the input service 
		//! (i.e head tracking, or a mocap system rigid body).
		Trace, 
		//! Trace: generated when a traced object is lost by the device managed by the input service 
		//! (i.e head tracking, or a mocap system rigid body).
		Untrace,

		//! Click: generated on a down followed by an immediate up event.
		//! parameters: x, y.
		Click,
		//! DB_Click: generated by a sequence of quick down/up/down/up events.
		//! parameters: x, y.
		DB_Click,
		//! Move_Left: generated when the source of event goes toward the left of the screen.
		//! parameters: x, y.
		Move_Left,
		//! Move_Right: generated when the source of event goes toward the right of the screen.
		//! parameters: x, y.
		Move_Right,
		//! Move_Up: generated when the source of event goes toward the top of the screen.
		//! parameters: x, y.
		Move_Up,
		//! Move_Down: generated when the source of event goes toward the bottom of the screen.
		//! parameters: x, y.
		Move_Down,
		//! Split_Start: generated at the start of a split/zoom gesture.
		//! parameters: x, y, x2, y2.
		Split_Start,
		//! Split_End: generated at the end of a split/zoom gesture.
		//! parameters: x, y, x2, y2.
		Split_End,
		//! Split_Apart: generated during a split/zoom gesture. Two event sources are moving away from each other.
		//! parameters: deltaDist, deltaRatio, x, y, x2, y2
		Split_Apart,
		//! Split_Close: generated during a split/zoom gesture. Two event sources are moving toward each other.
		//! parameters: deltaDist, deltaRatio, x, y, x2, y2
		Split_Close,
		//! Rotate_Start: generated at the start of a rotation gesture.
		//! parameters: x, y, x2, y2.
		Rotate_Start,
		//! Rotate_End: generated at the end of a rotation gesture.
		//! parameters: x, y, x2, y2.
		Rotate_End,
		//! Rotate_Counterclock: generated when an event source is stationary while a second source is rotating
		//! around the first in a counter-clockwise direction.
		//! parameters: angle(radians), x, y, x2, y2
		Rotate_Counterclock,
		//! Rotate_Clock: generated when an event source is stationary while a second source is rotating
		//! around the first in clockwise direction.
		//! parameters: angle(radians), x, y, x2, y2
		Rotate_Clock
	};

	// id of the source of this event. Input services associate unique ids to each of their event sources.
    unsigned int sourceId;
	
	// Type of the service that generated this event.
	enum InputService::ServiceType serviceType;

	// Unique id of the service that generated this event.
	int serviceId;

	// The event type.
    enum Type type;

	// Event flags.
	unsigned int flags;

	// Event timestamp.
	unsigned int timestamp;

	// Position.
    float x;
	float y;
	float z;
	
	// Second finger position.
	float x2;
	float y2;
	
	// 2D Split/Zoom gestures.
	float deltaDist; // Delta distance in pixels.
	float deltaRatio; // Delta ratio to the last last distance of the two fingers.

	// Rotation.
	float rw;
    float rx;
	float ry;
	float rz;

	//Point set
	int numberOfPoints;
	Vector3f pointSet[32];
};

}; // namespace omega

#endif