#summary Documentation of OInputServer and NetService datagrams.
#sidebar Sidebar

= Introduction =

== Connecting ==
  # Open a tcp connection on port 27000 to the computer running oinputserver.
  # Send a string specifiying the port you'd like to receive data on. For example:  "data_on,27001" You can replace 27001 with the port number of your choice.
  # Close the tcp connection
  # Open a udp connection to the port you previously specified (27001 in this example)
  # Start listening for packets and parse them as they arrive


== Datagram Structure ==
Datagrams are a string of the following format: '{Service Type}:{Event Type},{Source ID},{Param1},...,{ParamN} '

Number of parameters depend on the service type. Note the trailing space at the end of the datagram. Source ID is a unique identifier for that touch, rigid body, controller, etc. Service and event types are described below.

= Service Types =

Each service type is defined as follows:

0: Pointer

1: Mocap

2: Keyboard

3: Controller

4: Ui

5: Generic

The current enumeration is found in include/omega/Service.h

------------------------------------------------------------

== Pointer Datagram ==

There are three kinds of pointer datagrams: mouse, touch point, and touch gesture.

=== <u> Mouse </u> ===
'0:{Event ID},{Source ID},{X Position},{Y Position} '


=== <u> Touch Point </u> ===
'0:{Event ID},{Source ID},{X Position},{Y Position},{X Width},{Y Width} '

=== <u> Touch Gestures </u> ===
Touch gestures parameters depend on the event type. See Event ID Types below for a listing of all event types.

==== Touch Down / Move / Up / Click / Move ====
This applies for Click, DoubleClick, MoveRight, MoveUp, MoveLeft, and MoveDown.

'0:{Event ID},{X Position},{Y Position} '

==== SplitStart / SplitEnd ====
Denotes the beginning or end of a two finger split/zoom gesture and lists the coordinates of each finger. X3 and Y3 are the midpoints of position 1 and 2.

'0:{Event ID},{Source ID},{X3 Position},{Y3 Position},{X2 Position},{Y2 Position},{X1 Position},{Y1 Position} '

==== Split ====
A two finger split/zoom gesture. Lists the coordinates of each finger, delta distance, and delta ratio. X3 and Y3 are the midpoints of position 1 and 2.

'0:{Event ID},{Source ID},{X3 Position},{Y3 Position},{X2 Position},{Y2 Position},{X1 Position},{Y1 Position},{Delta distance},{Delta ratio} '

==== Rotate Start/End ====
Denotes the start/end of a two finger rotation gesture. One finger (anchor) is stationary while the other rotates around it. The X,Y position is the center of rotation/anchor.

'0:{Event ID},{X Position},{Y Position},{Anchor X},{Anchor Y},{Rotating X},{Rotating Y} '

==== Rotate ====
A two finger rotation gesture. One finger (anchor) is stationary while the other rotates around it. The X,Y position is the center of rotation/anchor. Angle is in radians.

'0:{Event ID},{Source ID},{X Position},{Y Position},{Anchor X},{Anchor Y},{Rotating X},{Rotating Y},{Angle} '

------------------------------------------------------------

== Mocap Datagram ==

'1:{Source ID},{X Position},{Y Position},{Z Position},{X Rotation},{Y Rotation},{Z Rotation} '

------------------------------------------------------------

== Controller Datagram ==

Controller datagrams depend of the controller type: Xbox 360, PS3, Wiimote.

Controller Type ID:

0: Xbox 360

1: PS3 Sixaxis

2: Wiimote

3: Wii Nunchuck


=== Xbox 360 Datagram ===

'3:{Source ID},0,{Left analog left/right},{Left analog up/down},{Right analog left/right},{Right analog up/down},{Triggers},A,B,X,Y,LB,RB,Back,Start,LA,RA,0,0,0,0,0,DPAD,0,0 '

Analog stick values range from -1000 to 1000 where negative is left or up. Thus a value of 1000 would represent an analog stick moved fully to the right or down.

The trigger value ranges from -1000 to 1000. In this case, pressing the left trigger will set the value from 0 to 1000, the right trigger will set the value from 0 to -1000. Not pressing the triggers or fully pressing down on both will result in a value of 0. 

The button fields (A,B,X,Y,LB,RB,Back,Start,LA,RA) will either be 0 (not pressed) or 1 (pressed). LA and LR stand for the left/right analog trigger buttons.

The DPAD values are as follows:
 * Negative: Not pressed
 * 0: Up
 * 4500: Up-Right
 * 9000: Right
 * 13500: Right-Down
 * 18000: Down
 * 22500: Left-Down
 * 27000: Left
 * 31500: Up-Left

=== PS3 Sixaxis Datagram ===

*Note:* PS3 controller support requires MotioninJoy.

'3:{Source ID},1,{Left analog left/right},{Left analog up/down},{Right analog left/right},{Right analog up/down},{Triggers},Cross,Circle,Square,Triangle,L1,R1,Select,Start,L3,R3,PS Button,Up,Down,DPAD,Roll,Pitch '

Analog stick values range from -1000 to 1000 where negative is left or up. Thus a value of 1000 would represent an analog stick moved fully to the right or down.

The trigger value ranges from -1000 to 1000. In this case, pressing the left trigger will set the value from 0 to 1000, the right trigger will set the value from 0 to -1000. Not pressing the triggers or fully pressing down on both will result in a value of 0. 

The button fields (Cross,Circle,Square,Triangle,L1,R1,Select,Start,L3,R3,PS Button,Up,Down) will either be 0 (not pressed) or 1 (pressed). L3 and R3 are the analog stick buttons.

The DPAD values are as follows. *Note:* This is different from the Xbox:
 * Negative: Not pressed
 * 0: Up
 * 4500: *No data*
 * 9000: Down
 * 13500: Left-Down
 * 18000: Left
 * 22500: *No data*
 * 27000: Right
 * 31500: Up-Right

The Roll value range from -1000 to 1000. Where positive is tilting to left.

The Roll value range from -1000 to 1000. Where positive is tilting to up toward the player.

=== Wiimote Datagram ===

Wiimote integration is provided by WiiYourself! by gl.tter

'3:{Source ID},2,Acceleration X,Acceleration Y,Acceleration Z,A,B,Plus,Home,Minus,One,Two,Up,Down,Left,Right,Extension,0,0,Yaw,Pitch,Roll,0 '

Acceleration values are integers where 1000 is the force of gravity. X represents motion to the left and right (right+). Y represents motion forward and back (forward+). Z represents motion up and down (down+). Thus an acceleration value of 0,0,1000 represents a Wiimote on a flat surface with the buttons facing up.

The button fields (A,B,Plus,Home,Minus,One,Two,Up,Down,Left,Right) will either be 0 (not pressed) or 1 (pressed).

Extension represents what is currently plugged into the Wiimote extension slot:
 * 0: Nothing
 * 1: Nunchuk
 * 2: Classic Controller *(Not Currently Supported)*
 * 3: Guitar Hero 3/World Tour Guitar *(Not Currently Supported)*
 * 4: World Tour Drumset *(Not Currently Supported)*
 * 5: Balance Board *(Not Currently Supported)*
 * 6: Wii MotionPlus

Pitch, Roll, and Yaw represent the acceleration data from the Wii MotionPlus extension.  *Further documentation pending*

=== Wii Nunchuck Datagram ===

'3:{Source ID},3,Analog X,Analog Y,Acceleration X,Acceleration Y,Acceleration Z,C,Z,0,0,0,0,0,0,0,0,0,0,0,0,0,0 '

Analog stick values range from -1000 to 1000 where negative is left or up. Thus a value of 1000 would represent an analog stick moved fully to the right or down.

Acceleration values are integers where 1000 is the force of gravity. X represents motion to the left and right (right+). Y represents motion forward and back (forward+). Z represents motion up and down (down+). Thus an acceleration value of 0,0,1000 represents a Wiimote on a flat surface with the buttons facing up.

The button fields (C,Z) will either be 0 (not pressed) or 1 (pressed).

------------------------------------------------------------

= Event ID Types =

Each event type is defined by an enumeration. (See Event.h)

0: Select

1: Toggle

2: ChangeValue

3: Update

4: Move

5: Down

6: Trace

7: Untrace

8: Click

9: DoubleClick

10: MoveLeft

11: MoveRight

12: MoveUp

13: MoveDown

14: Zoom

15: SplitStart

16: SplitEnd

17: Split

18: RotateStart

19: RotateEnd

20: Rotate

21: Null