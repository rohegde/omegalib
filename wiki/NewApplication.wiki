#summary Creating an omegalib application
#sidebar Sidebar

<p>*Last revision:* ver. 2.1</p>

This page explains how to set up the build environment for an empty omegalib application. When using *omegaSource* on this page, we refer to the root directory of your source copy of omegalib. *omegaBuild* will be the root directory of your build.

When creating a new omegalib application, you have three options:
 * *Add it to the omegalib build*: This is the easiest solution. Your application would be under omegaSource/src/apps. Building omegalib would automatically build your application as well. This may not be desirable if you want to keep your application separate from the omegalib codebase (i.e. you are not one of the main developers)
 
 * *Create an external application using CMake*: This is still pretty easy to do. You would create a cmake file for your own application (this assumes you have basic knowledge of cmake) and use the FindOmegalib.cmake script under omegaSource/CMakeModules to link your application to your local omegalib build.
 
 * *Create an external application using a native build system directly (make, Visual Studio, etc.)*: Altough doable, this solution is not officially supported. You should really use CMake, and save yourself a few headaches. If you must choose this path the basic steps would be:
  * add omegaSource/include, omegaSource/ext/include and omegaBuild/include, omegaBuild/omicron/omicron/include to your compiler include paths
  * depending on build type and platform, link against libraries under omegaBuild/lib, omegaBuild/bin, omegaSource/ext/lib32, omegaSource/ext/lib64

This page only covers solutions 1 and 2.

= Solution 1: Adding an application to the omegalib build =
= Solution 2: Building an external application =