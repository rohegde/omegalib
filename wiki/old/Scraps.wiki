#summary omegalib General notes / plans for omegalib developement
#sidebar Sidebar

== ENDURANCE Demo ==
 * use image widget to navigate data & ROI selection!
`ImageInteractionWidget`
 * point selection
 * rubberband selection
 
== SAGE Integration ==
Send pixels to SAGE through SAIL. Options:
	* Integrate as separate display system (I would have to take care of doing off-axis projection and a bunch of other stuff) *NO*
	* Integrate on top of display system at:
		* omega/DisplaySystem level (more generic) 
		* oengine level (allows me to use Camera / RenderPass functionality)
		
Create `IFrameListener` interface.
Called by display system whenever a frame has finished rendering (per-client.) Gives back to the implementer enough info (i.e. a RenderTarget?) to
capture the framebuffer contents and do whatever with them.

DisplaySystem supports attaching a `IFrameListener`, but the same can be done on a camera *MOST FLEXIBLE SOLUTION*

Implement a `SailService` service class, deriving from `IFrameListener` as well. `SailService` can connect to SAGE through Sail, receive SAGE messages
and (if the application is a graphical application) register itself to the display system (or to a camera) to send pixel output to SAGE.

Starting / Stopping the service connects/disconnects to SAGE, so the application has control over the streaming.

Multiple sail service instances can create multiple windows on SAGE from the same omegalib application (i.e a Vtk app displaying multiple plots on a SAGE display)

Sail UI capabilities can be used to create a view + control panel on a SAGE display

== Cave2 Simulator ==
CaveSim
Requirement
	* draw geometry of screens
	* draw output of just one screen?
	* let user navigate around in environment
What's needed:
	* appli needs to know about real thing geometry and tile config
	* needs to support output to secondary 'observer' view
	* this observer view may be running even on actual CAVE installation. Or it can run alone when in simulation mode.
	* Deadlines for this?
	* simulation of tracking hardware
		* head tracking
		* wands and other rigid bodies.
		* (Simulation of wand already kinda done through mouse controller).
		
= Changes =
== Revise Event class ==
(This task should be moved to omicron)
	* Zoom -> Scale
	* split: convert to Scale

== Refactor Event class, generic messaging support ==
== Other Changes ==
	* move autoplace code from menu widget to Container
	* Create shaders through new, not GpuManager

= Other Notes =
	* RenderableSceneObject needs to be in omegaToolkit only because of Effect. think about solutions
	* tar/.gz freeglut and glew, remove from src and put in external folder
	* Notes on clustered systems in	!from http://www.cs.ucl.ac.uk/staff/a.steed/cluster-solutions-with-figures.htm! !ClusterJuggler!

	