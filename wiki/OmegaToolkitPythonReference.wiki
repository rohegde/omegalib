#summary Python reference: module omegaToolkit
#sidebar Sidebar

<p>*Last revision:* ver. 3.0 - 22 September 2012<font color=#ff0000> (This is a preliminary / work in progress document and may be incomplete)</font></p>*

<wiki:toc max_depth="4" />

= Module omegaToolkit =
omegaToolkit is a utility module for omegalib. It exposes some non-core functionalities such as
 * a 2D / 3D graphical user interface
 * a set of object manipulator techniques based on mouse / touch, 3d wands and kinect tracking
 
-------------------------------------------------------------------------------
==  `class ToolkitUtils` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_toolkit_1_1_toolkit_utils.html omegaTookit::ToolkitUtils] C++ class. Offers some generic utility static functions.

=== Methods ===
|| Method(s) || Description ||
|| `createInteractor(setting)` *static* || Creates an interactor object from a setting object ||
|| `setupInteractor(settingName)` *static* || Creates an interactor object from a setting name ||

=== Examples ===
==== Interactor creation ====
{{{
	node = SceneNode.create('node')
	
	# [ ... ] attach stuff to the node here
	
	# Create a standard interactor based on the settings under config/interactor
	# The config/interactor section of the system configuration file specifies what
	# interactor should be used depending on the hardware platform we are using (VR system, laptop, etc)
	interactor = ToolkitUtils.setupInteractor("config/interactor")
	
	# If we succesfully created an interactor, let's attach the node to it
	if(interactor != None):
		interactor.setSceneNode(node)
}}}

-------------------------------------------------------------------------------
==  `class MenuManager` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_toolkit_1_1ui_1_1_menu_manager.html omegaTookit::ui::MenuManager] C++ class. Offers a simple to use menu system to control applications.

=== Methods ===
|| Method(s) || Description ||
|| `createAndInitialize()` *static* || Creates a new instance of the MenManager and initializes it ||
|| `createMenu(name)` || Creates a new menu and returns it ||
|| `setMainMenu(menu)` || Sets the specified menu object as the main menu (it will be opened when a system-specific key or button will be pressed ||

=== Examples ===
==== Basic ====
{{{
	# Create an empty menu and set it as the main menu
	mm = MenuManager.createAndInitialize()
	menu = mm.createMenu('menu')
	mm.setMainMenu(menu)
}}}

-------------------------------------------------------------------------------
==  `class Menu` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_toolkit_1_1ui_1_1_menu.html omegaTookit::ui::Menu] C++ class. Represents a menu. Menus can contain buttons, sliders, checkboxes and sub menus

=== Methods ===
|| Method(s) || Description ||
|| `addItem(type)` || Adds an item to the menu. Type can be one of `MenuItem.Button`, `MenuItem.Checkbox`, `MenuItem.Slider`, `MenuItem.SubMenu` ||
|| `show()` || Displays the menu ||
|| `hide()` || Hides the menu ||

-------------------------------------------------------------------------------
==  `class MenuItem` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_toolkit_1_1ui_1_1_menu_item.html omegaTookit::ui::Menu] C++ class. Represents an item in a menu

=== Methods ===
|| Method(s) || Description ||
|| `getText()`, `setText(string)` || Gets or sets the label for the menu item ||
|| `getDescription()`, `setDescription(string)` || Gets or sets the description for the menu item ||
|| `getCommand()`, `setCommand(string)` || Gets or sets the script command to be executed when the menu item is activated or changed ||
|| `isChecked()`, `setChecked(value)` || Gets or sets the checked status for checkbox menu items ||
|| `getUserTag()`, `setUserTag(value)` || Gets or sets a string user tag associated to this menu item ||
|| `getSubMenu()` || Returns the sub menu attached to this menu item. Valid only for `MenuItem.SubMenu` item types ||

-------------------------------------------------------------------------------
==  `class Container3dSettings` ==

-------------------------------------------------------------------------------
==  `class UiModule` ==

-------------------------------------------------------------------------------
==  `class WidgetFactory` ==

-------------------------------------------------------------------------------
==  `class Widget` ==

-------------------------------------------------------------------------------
==  `class Container` (extends `Widget`) ==

-------------------------------------------------------------------------------
==  `class Button` (extends `Widget`) ==

-------------------------------------------------------------------------------
==  `class Image` (extends `Widget`) ==

-------------------------------------------------------------------------------
==  `class Label` (extends `Widget`) ==
