#summary This page gives an overview of how the OmegaLib will interact with an application.

= Introduction =
As mentioned previously, the Omega Library is a C++ library that will serve as a middleware for various unique devices.  This page will briefly summaries the functionality of each element of the library and describe how it interacts with other elements.  Below is a diagram of the overall architecture.  Additionally definitions for the pseudo-functions will be describe at the end. 

<a href="http://higherechelongames.com/omegaTable/LibGen.jpg">
<img src="http://higherechelongames.com/omegaTable/LibGen.jpg" width="296" height="512">
<a>

= Omega Library Layer =
The library consist of two major layers:
 * <b><u>Manager Layer</u></b>
 The Manager Layer is responsible for:
  * Initializing various connections to device servers
  * Managing the Update Thread and Rendering Thread.
 The Update Thread constantly sends an update instruction to both Device Servers and Aggregation Drivers.  In the case of the Device Servers, data for this device is sent via network to their respective Device Drivers.  The case of the Aggregation Drivers will be covered in the following section.

 * <b><u>Driver Layer</u></b>
 The Driver Layer is comprised of various drivers written for specific devices.  The goal was to encapsulate each device such that new drivers can be implemented as technology improves.  Drivers are separated into three categories:
  * Device Drivers 
   Device Drivers are mainly drivers for specific pieces of hardware such as:
    * PQLabs multitouch overlays
    * TacTile - Multitouch Display
    * IPad - Multitouch Device 
    * Natural Point's TrackIR - Head tracking device
    * OptiTrack's Tracking Tools - Head and 3D Gesture Tracking Device
   These drivers collect data form the Device Servers, parse it and package it into either an OmegaEvent (OMEvent) or an OmegaState (OMState).  These structures will be elaborated in the Data Structure section.
  * Render Drivers
  Render Drivers will we used to render graphical scenes into stereo.  There will also be support for parallel rendering.  This section is still a little vague.  Research and brainstorming sessions are underway to determine how this will be implemented.  Currently there are plans to integrate the DVC as a means to render stereo.  Equalizer is another avenue that will be pursued. 
  * Aggregation Drivers 
  Aggregations Drivers will serve two functions.
  One function assumes that more than one iteration of the same input device is running.  For example there are two wall sized tile displays, each with its own PQLabs multitouch overlay.  If a 3D scene spans across these two displays an Aggregation Driver will be needed to collect all the touch data and translate it.
  Another function assumes that a gesture can be a combination of multitouch and camera tracking.  In order to implement such a gesture, data from a multitouch device and camera tracking device need to be interpreted. 

Data Structure
 Each input will be identified by an unique identifier that is assigned by the manager layer.  Information about this input will be stored as OmegaEvents or OmegaStates.  OmegaEvents records all the user inputs as they occur.  OmegaStates record only the most up to date information for a given input.  For example touching the multitouch device may generate 30 events in a second.  The OmegaEvents stores all 30, where as the Omega States stores only 1 up to date version.  These structures will be stored in their own circular link list.  

= Applications Layer Function Calls =
 * {{{void omegaInit(const char * cfg, int size);}}}
        Initialize all the devices within the configuration file "char*cfg".  This will help determine the capabilities the current device.  Within the configuration file a user can specify whether to block, terminate or continue if a device does respond.
 * {{{void omegaDisplayFunction(func*func);}}}
        Allows a programmer to pass a display function to Omega Library.  This display function will be the scene that is desired.  Much like OpenGL, the main program relinquishes its main loop via the display function.  The Render Driver will take over running the main loop until the program exits.
 * {{{void omegaMainLoop();}}}
        Is the function the application will call when it is ready to relinquish its main loop.
 * {{{int omegaGetNumEvents( );}}}
        Determine the number events on the events list.
 * {{{int omegaLostEvents();}}}
        Determine the number events lost on the events list due to time out.
 * {{{OMState*omegaGetState(uint id);}}}
        Returns the OmegaState of a given input id.
 * {{{int omegaGetEvents( OMEvent*ptr, int maxEvent);}}}
        Returns the OmegaEvents list of size maxEvent.