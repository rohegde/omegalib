#summary Python reference: module omega
#sidebar Sidebar

<p>*Last revision:* ver. 3.1 - 15 October 2012<font color=#ff0000> (This is a preliminary / work in progress document and may be incomplete)</font></p>*

<wiki:toc max_depth="4" />

= Module omega =
The omega module contains all the core functionality of omegalib like scene graph management and event handling. It also offers a few utility functions to manage verious aspects of an omegalib application.

-------------------------------------------------------------------------------
==  Free Functions ==

=== `getDefaultCamera()` ===
Returns the main omegalib camera instance

=== `getCamera(name)` ===
Finds a camera by name

=== `getOrCreateCamera(name)` ===
Finds a camera by name or creates a new one if a camera with the specified name has not been found

=== `getCameraById(id)` ===
Retrieves a camera based on its id (*currently supported by Porthole service only*)

=== `getScene()` ===
Returns the root node of the scene.

Example:
{{{
	# Move the entire scene
	root = getScene()
	root.setPosition(Vector3(0, 2, 0))
}}}

=== `setUpdateFunction(func)` ===
Sets a callback functionto to be called for each frame. The function will take three parameters: 
	* frame number
	* time since application start (in seconds)
	* time since last frame (in seconds)
Example:
{{{
	def onUpdate(frame, time, dt):
		print("frame number: " + frame)
		
	setUpdateFunction(onUpdate)
}}}	

=== `setEventFunction(func)` ===
Sets a callback function to be called every time an event is received.
Example:
{{{
	def onEvent():
		e = getEvent()
		# prints the event type
		print(e.getType())
		
	setEventFunction(onUpdate)
}}}	

=== `getEvent()` ===
Returns the event currenty being processed. Should be used only inside an event handler function.

=== `setDrawFunction(func)` ===
(*experimental*)
Sets a callback functionto to be called for each frame during 2d drawing. The function will take four parameters: 
	* the total display size (as a Vector2)
	* the current tile size (as a Vector2)
	* a `Camera` object
	* a `DrawInterface` object that can be used to draw 2d elements
Example:
{{{
	white = Color("white")
	black = Color("black")

	def onDraw(displaySize, tileSize, camera, painter):
		global white
		global black

		# Get the default font
		font = painter.getDefaultFont()

		# Set some text and compute its width and height in pixels (given the font we cant to use)
		text = "Hello World From Python!"
		textSize = font.computeSize(text)

		# Draw a white box and put the text inside it
		painter.drawRect(Vector2(10, 10), textSize + Vector2(10, 10), white)
		painter.drawText(text, font, Vector2(15, 15), TextAlign.HALeft | TextAlign.VATop, black)
		
	setDrawFunction(onDraw)
}}}	

=== `getRayFromEvent(evt)` ===

=== `querySceneRay(origin, dir, callback)` ===
Performs a query on the scene using a ray defined by the `origin` and `dir` parameters. For each hit node, it invokes a callback function taking the node reference and distance to the origin as parameters.

*NOTE:* only nodes tagged as selectable (see `Node.setSelectable`) will be considered for the query.

Example:
{{{
	node = SceneNode.create('node')
	getScene().addChild(node)
	node.setSelectable(true)
	
	# attach some stuff to the node...
	# [ ... ]
	
	def queryCallback(node distance):
		print("Node " + node.getName() + " hit at " + distance)
	
	querySceneRay(Vector3f(0, 0, 0), Vector3f(0, 0, -1), queryCallback)
}}}

=== `addSelectionListener(node, cmd)` ===
Attaches a command to be executed whenever the node selection state changes

Example:
{{{
	node = SceneNode.create('node')
	getScene().addChild(node)
	
	# Change the node size when the selection state changes
	addSelectionListener(node, 'node.setScale(Vector3f(1.5, 1.5, 1.5))')
	
	# Force a selection state change. This will invoke the listener code
	node.setSelected(True)
}}}

=== `addVisibilityListener(node, cmd)` ===
Attaches a command to be executed whenever the node visibility changes

Example:
{{{
	node = SceneNode.create('node')
	getScene().addChild(node)
	
	# Print a message on visibility changes
	addVisibilityListener(node, 'print("node " + node.getName() + " visible changed"')
	
	# Change node visibility.
	node.setVisible(False)
}}}

=== `oexit()` ===
Exits the application

=== `ofindfile(name)` ===
Searches for a file, returning the full path if found, or an empty string if the search fails. See [FileSystem the filesystem management page] for more information on file lookup in omegalib.

=== `osetdataprefix(prefix)` ===
Sets a path prefix for data loading operations. Currently used only for image loading commands.

=== `ogetdataprefix()` ===
Gets the path prefix used for data loading operations. Currently used only for image loading commands.

=== `orun(script)` ===
Runs an external script. The script is executed immediately.

=== `queueCommand(script)` ===
Queues a script command for execution. The command will be executed during the next update cycle.

=== `printChildren(node, depth)` ===
Prints the tree of children of `node` up to the specified depth

=== `printObjCounts()` ===
Prints a list and count of currently allocated refcounted objects

=== `toggleStats(stats)` ===
Enables or disables statistics output from a specific source in the statitics window. The statistics window must be enabled for the configuration. The `stats` parameter is a list of statistic or tile names separated by spaces.

Example:
{{{
	# Starts displaying statistics for tile 0x0
	toggleStats('0x0')
	
	# Stops displaying statistics for tile 0x0
	toggleStats('0x0')
	
	# Starts displaying statistics for tile 1x0, 1x1, 0x1
	toggleStats('1x0 1x1 0x1')
	
	# Displays statistics for all available sources
	toggleStats('all')
	
	# Displays statistics in compact mode
	toggleStats('compact')
}}}

=== `overridePanopticStereo(value)` ===
When set to true, switches from panoptic stereo tracking to standard tracking. This option is used only when panoptic stereo is enabled for the current display system.

=== `getSoundEnvironment()` ===
Returns an instance of the `SoundEnvironment` class if sound support is available on the system. Return `None` otherwise.

=== `isSoundEnabled()` ===
Returns `True` if sound is enabled and available on the system

=== `toggleStereo()` ===
Switches between mono and stereo rendering mode on systems with stereo rendering support.

=== `loadImage(filename)` ===
Loads an image given a file path. If loading is succesfull, returns an instance of `PixelData`. If loading fails, return `None`

=== `isMaster()` ===
Returns `True` if the script is executing on the *master node* of a cluster display system.

-------------------------------------------------------------------------------
==  `class SceneNode` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_1_1_scene_node.html omega::SceneNode] C++ class. Base class for nodes in the scene graph
=== Methods ===
|| Method(s) || Description ||
|| *Basic* || ||
|| `create(name)` *static* || Creates a scene node with the specified name ||
|| `getName()` || Gets the node name ||
|| *Transformation* || ||
|| `getPosition()` || Gets the node position ||
|| `setPosition(pos)`, `getPosition()` || Gets and sets the node position ||
|| `getScale()`, `setScale(pos)` || Gets and sets the node scale ||
|| `getOrientation()`, `setOrientation(orientation)` || Gets and sets the node orientation ||
|| `yaw(rads)`, `pitch(rads)`, `roll(rads)` || Applies a yaw, pitch or roll to the node (in radians) ||
|| *Hierarchy* || ||
|| `numChildren()` || Gets the number of children of this node ||
|| `getChildByName(name)` || Finds a child by name ||
|| `getChildByIndex(index)` || Gets a child by index ||
|| `addChild(node)` || Adds a child to this node ||
|| `removeChildByRef(node)` || Removes a child by reference ||
|| `removeChildByName(name)` || Removes a child by its name ||
|| `removeChildByIndex(index)` || Removes a child by its index ||
|| `getParent()` || Gets the node parent ||
|| *Visibility* || ||
|| `isVisible()`, `setVisible(value)` || Gets or sets the node visibility status ||
|| *Bounding box* ||
|| `isBoundingBoxVisible()`, `setBoundingBoxVisible(value)` || ||
|| *Selection control* ||
|| `isBoundingBoxVisible()`, `setBoundingBoxVisible(value)` || ||
|| `isSelected()`, `setSelected(value)`|| ||
|| `isSelectable()`, `setSelectable(value)` || ||

=== Examples ===
==== Basic ====
{{{
	# gets the root scene node
	root = getEngine().getScene()
	# prints the node position
	print(root.getPosition()
	
	root.setPosition(Vector3(0, 2, -2))
	
	# scale is returned as a Vector3
	scale = root.getScale()
	scale.x = 0.1
	root.setScale(scale)
	
	# orientation is of Quaternion type
	print(root.getOrientation())
	
	# yaw, pitch roll are in radians	
	root.yaw(1)
}}}

-------------------------------------------------------------------------------
==  `class Event` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomicron_1_1_event.html omicron::Event] C++ class. Encapsulates information about input events.
Input events are explained in more detail [https://code.google.com/p/omicron-sdk/wiki/EventReference here].
This class is used within the context of an event handler function, registered through the `setEventFunction` call. The `EventType`, `EventFlags`, `EventExtraDataType`, `ServiceType` are together with the event class. They encapsulate the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomicron_1_1_event_base.html#af95879546c1e3486d8b26c24e787dc53 omicron::EventBase::Type] [ http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomicron_1_1_event_base.html#a39f525558912d1fd57b9d0a58a5e4977 omicron::EventBase::Flags] [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomicron_1_1_event_base.html#a91f2e2308ea1cec00fe036789a040bb9 omicron::EventBase::ExtraDataType] [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomicron_1_1_event_base.html#ab1f3e0a5d901729bf93e3b5ff37a54be omicron::EventBase::ServiceType] C++ Enumerations.

=== Methods ===
|| Method(s) || Description ||
|| `isKeyDown(key)`, `isKeyUp(key)` || ||
|| `isButtonDown(button)`, `isButtonUp(button)` || ||
|| `getSourceId()` || ||
|| `getType()` || ||
|| `getServiceType()` || ||
|| `getPosition()`,	`getOrientation()` || ||
|| `isProcessed()` || Returns `True` if this event has already been handled somewhere else ||
|| `setProcessed()` || Marks this event as processed ||

=== Event types ===
The method `getType()` returns a value from the `EventType` enumeration. The `EventType` enumeration contains the following values: `Select`, `Toggle`, `ChangeValue`, `Update`, `Move`, `Down`, `Up`, `Trace`, `Connect`, `Untrace`, `Disconnect`, `Click`, `Zoom`, `Split`, `Rotate`, `Null`

For more information about event types read the [https://code.google.com/p/omicron-sdk/wiki/EventReference Event reference page] of the omicron SDK

=== Event flags ===
The methods `isKeyDown()`, `isKeyUp()`, `isButtonDown()`, `isButtonUp()` return a value from the `EventFlags` enumeration. The `EventFlags` enumeration contains the following values: `Left`, `Middle`, `Right`, `Button1`, `Button2`, `Button3`, `Button4`, `Button5`, `Button6`, `Button7`, `SpecialButton1`, `SpecialButton2`, `SpecialButton3`, `Ctrl`, `Alt`, `Shift`, `ButtonDown`, `ButtonUp`, `ButtonLeft`, `ButtonRight`, `Processed`, `User`

For more information about event flags read the [https://code.google.com/p/omicron-sdk/wiki/EventReference Event reference page] of the omicron SDK

=== Event service types ===
The method `getServiceType()` returns a value from the `ServiceType` enumeration. The `ServiceType` enumeration contains the following values: `Pointer`, `Mocap`, `Keyboard`, `Controller`, `Ui`, `Generic`, `Brain`, `Wand`, `Audio`

For more information about event service types read the [https://code.google.com/p/omicron-sdk/wiki/EventReference Event reference page] of the omicron SDK

=== Example ===
{{{
	def handleEvent():
		e = getEvent()
		print(e.getPosition())
		if(e.isButtonDown(EventFlags.ButtonLeft)): 
			print("Left button pressed")
		if(e.isButtonDown(EventFlags.ButtonUp)): 
			print("Up button pressed")
			
	setEventFunction(handleEvent)
}}}

-------------------------------------------------------------------------------
==  `class Camera` (extends `SceneNode`) ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_1_1_camera.html omega::Camera] class. Controls the applications camera (accessed through `getDefaultCamera()` or additional cameras in the application.

=== Methods ===
|| Method(s) || Description ||
|| `setYawPitchRoll(value)` || Sets the camera orientation as yaw, pitch roll in radians ||
|| `getHeadOffset()`, `setHeadOffset(value)` || ||
|| `setHeadOrientation(value)`, `getHeadOrientation()` || ||
|| `isTrackingEnabled()`, `setTrackingEnabled(value)` || ||
|| `getTrackerSourceId()`, `setTrackerSourceId(value)` || ||
|| `setControllerEnabled(value)`, `isControllerEnabled()` || ||
|| `localToWorldPosition(position)` || ||
|| `localToWorldOrientation(orientation)`|| ||

-------------------------------------------------------------------------------
==  `class DrawInterface` ==
(*experimental*)
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_1_1_draw_interface.html omega::DrawInterface] class. Exposes methods to simplify drawing on 2d surfaces.
Used in conjunction with `setDrawFunction`

=== Methods ===
|| Method(s) || Description ||
|| `drawRectGradient(position, size, orientation)` ||  ||
|| `drawRect(position, size, color)` ||  ||
|| `drawRectOutline(position, size, color)` ||  ||
|| `drawText(text, font, position, alignFlags)` ||  ||
|| `drawCircleOutline(position, radius, color, segments)` ||  ||
|| `createFont(fontName, fileName, size)` ||  ||
|| `getFont(name)` ||  ||
|| `getDefaultFont()` ||  ||

=== Remarks ===
Valid align flags for `drawText`:
  * `TextAlign.HALeft`
  * `TextAlign.HARight`
  * `TextAlign.HACenter`
  * `TextAlign.VATop`
  * `TextAlign.VABottom`
  * `TextAlign.VAMidde`

-------------------------------------------------------------------------------
==  `class Font` ==
(*experimental*)
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_1_1_font.html omega::Font] class. 
=== Methods ===
|| Method(s) || Description ||
|| `computeSize(text)` || Returns the width and height in pixels of the specified string ||

-------------------------------------------------------------------------------
==  `class PixelData` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/structomega_1_1_pixel_data.html omega::PixelData] class. 
=== Methods ===
|| Method(s) || Description ||
|| `getWidth()`, `getHeight()` || Returns the width and height in pixels of the specified image ||
  
-------------------------------------------------------------------------------
==  `class PortholeService` ==
Wraps the [http://omegalib.googlecode.com/svn/refdocs/trunk/html/classomega_1_1_camera.html omega::PortholeService] class. Manages the Porthole, a web-based interaction and display service for omegalib applications.

=== Methods ===
|| Method(s) || Description ||
|| `createAndInitialize(port, xmlPath, cssPath)` *static* || Creates a new instance of the porthole service ||

=== Examples ===
==== Initialization ====
{{{
	# Starts up the porthole service. 
	# The service will accept web requests on port 4480
	# app/app.xml contains the web interface definition (gui elements, output windows etc)
	# app/app.css defines the style of the interface. Can be left empty
	svc = PortholeService.createAndInitialize(4480, 'app/app.xml', 'app/app.css')
}}}
