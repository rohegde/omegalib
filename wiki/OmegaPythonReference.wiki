#summary Python reference: module omega
#sidebar Sidebar

<p>*Last revision:* ver. 3.0 - 27 June 2012<font color=#ff0000> (This is a preliminary / work in progress document and may be incomplete)</font></p>*

= Module omega =
The omega module contains all the core functionality of omegalib like scene graph management and event handling. It also offers a few utility functions to manage verious aspects of an omegalib application.

Module classes:
 * `Event`
 * `Engine`
 * `Node`
 * `SceneNode`
 * `Camera`
 * `Color`
 * `Setting`
 * `Actor`

Module enumerations:
 * `EventType`
 * `EventFlags`
 * `EventExtraDataType`
 * `ServiceType`

Module free functions:
 * `getEvent`
 * `getEngine`
 * `getDefaultCamera`
 * `getScene`
 * `querySceneRay`
 * `getRayFromEvent`
 * `printChildren`
 * `printObjCounts`
 * `settingLookup`
 * `settingExists`
 * `toggleStats`
 * `addSelectionListener`
 * `addVisibilityListener`
 * `oexit`
 * `ofindFile`
 * `orun`
 * `setUpdateFunction`
 * `setEventFunction`

-------------------------------------------------------------------------------
==  `class Node` ==
Wraps the [omega::Node link] C++ class. Base class for nodes in the scene graph

=== Methods ===
{{{
	# Basic
	getName()
	
	# Node manipulation
	getPosition(pos)
	setPosition()
	getScale()
	setScale(scale)
	setOrientation(orientation)
	quaternion getOrientation()
	yaw(radians)
	pitch(radians)
	roll(radians)
	
	# Node hierarchy
	numChildren()
	getChildByName(name)
	getChildByIndex(index)
	getParent()
}}}

=== Example ===
{{{
	# gets the root scene node
	root = getEngine().getScene()
	# prints the node position
	print(root.getPosition()
	
	root.setPosition(Vector3(0, 2, -2))
	
	# scale is returned as a Vector3
	scale = root.getScale()
	scale.x = 0.1
	root.setScale(scale)
	
	# orientation is of Quaternion type
	print(root.getOrientation())
	
	# yaw, pitch roll are in radians	
	root.yaw(1)
}}}

-------------------------------------------------------------------------------
==  `class Event` ==
Wraps the [omega::Node link] C++ class. Encapsulates information about input events.
Input events are explained in more detail here [dsf dfs].
This class is used within the context of an event handler function, registered through the `setEventFunction` call. The `EventType`, `EventFlags`, `EventExtraDataType`, `ServiceType` are together with the event class. They encapsulate the [sfs] [sdas] [asdas] [asdas] C++ Enumerations.

=== Methods ===
{{{
	isKeyDown(key)
	isKeyUp(key)
	isButtonDown(button)
	getSourceId()
	getType()
	getServiceType()
	getPosition()
	getOrientation()
}}}

=== Example ===
{{{
}}}
