#line 2 "D:/Workspace/3rdparty/equalizer-win-x86-vs9/libs/server/lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
static yyconst short int yy_accept[1505] =
    {   0,
        0,    0,  202,  201,  199,  198,  201,  200,  201,  197,
      201,  201,  201,  201,  193,  193,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,    0,  195,    0,    0,
        0,  193,  194,  192,  200,  191,  185,    0,    0,    0,
        0,    0,    0,    0,  187,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  196,  191,    0,    0,    0,    0,
        0,    0,    0,    0,   86,    0,   85,    0,    0,    0,
        0,  172,    0,  116,    0,    0,    0,    0,    0,    0,
        0,   71,    0,  111,    0,    0,    0,   79,    0,    0,

      112,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  127,    0,    0,  159,    0,    0,    0,
        0,  160,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   72,   81,    0,
        0,    0,    0,    0,    0,  132,    0,    0,    0,    0,
        0,    0,    0,    0,  134,    0,  110,  189,    0,    0,

        0,    0,  109,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  183,    0,  104,   48,    0,    0,
        0,    0,    0,    0,   49,    0,    0,  123,    0,    0,
        0,    0,    0,    0,    0,    0,  126,    0,    0,    0,
        0,  105,    0,   91,  152,    0,  188,    0,    0,    0,
      177,  131,  138,    0,  139,    0,   84,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
      106,    0,    0,    0,    2,    0,  178,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  147,  148,    0,    0,  145,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   74,    0,    0,    0,    0,    0,    0,    0,  190,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
       92,    0,    0,   46,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   90,    0,    0,    0,  114,
        0,    0,  157,    0,    0,  146,    0,    0,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   73,    0,    0,    0,    0,    0,
        0,    0,   78,    0,    0,  173,  174,    0,    0,    0,
       47,    0,    0,    0,    0,    0,   88,    0,    0,  102,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,    0,    0,    0,    0,  175,    0,
        0,    0,   93,    0,    0,    0,  113,    0,    0,    0,
        0,    0,    0,    0,   76,  136,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  163,    0,  137,    0,   83,   77,    0,    0,    0,
        0,    0,  184,   94,    0,  158,    0,  141,  128,  125,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,

        0,    0,   89,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  149,    0,    0,  155,    0,    0,    0,  140,
        0,    0,  179,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  142,  143,    0,    0,    0,    0,    0,    0,
        0,    0,  150,    0,    0,    0,  180,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,  181,  164,    0,

      122,    0,   51,    0,    0,  103,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  166,
        0,    0,    0,    0,  182,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  129,    0,    0,    0,    0,    0,
      170,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  144,    0,    0,  153,    0,    0,    0,
        0,    0,    0,    0,  171,    0,    0,    0,   57,    0,
       60,    0,    0,    0,    0,    0,  165,    0,    0,    0,
        0,    0,    0,    0,  167,  162,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   95,    0,    0,   67,   63,
       64,   65,    0,    0,    0,  176,    0,    0,   96,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
        0,    0,    0,    0,    0,   59,    0,    0,    0,    0,
       58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,    0,
      119,  121,   98,    0,    0,   69,   66,    0,   99,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   52,    0,   54,
        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   53,    0,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  186,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   61,  120,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   14,    0,    0,    0,    0,   10,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  168,    0,    0,    0,    0,    0,    0,    0,   15,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  169,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   43,    0,    0,
        0,    0,   12,    4,    0,    0,    0,    0,   19,   16,
        0,    0,    0,    0,    0,    0,    0,    0,   35,   32,
       31,   33,    0,    0,    0,    0,   44,    0,   40,    0,

       13,    0,    0,    0,    0,    0,   20,    0,    0,    0,
       28,    0,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,   34,   39,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   25,    0,   29,
        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,   11,    0,    0,   24,
        0,    0,    0,    7,    5,   17,   22,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,    0,    0,    0,    0,

       41,    0,   42,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    5,    1,    8,    9,
        9,    1,   10,    5,   11,   12,   13,   14,   15,   16,
       17,   14,   14,   18,   14,   14,   14,    5,    1,    5,
        1,    5,    1,    5,   19,   20,   21,   22,   23,   24,
       25,   26,   27,    5,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        9,    5,    9,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,    9,    1,    9,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    2,    3,    3,    3,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[1507] =
    {   0,
        0,    0, 1575, 1576, 1576, 1576, 1568, 1550,    0, 1576,
       59,   66,   71, 1559,   78,   85,   73, 1542,   76,   90,
     1536,   96, 1534,   87, 1548,   97,  100,   52,  100,  103,
     1529,  110,  104, 1545, 1542,   76,   93,   97,   98, 1495,
       91, 1507,   95, 1504,  100,  108,  116,  116,  117,  123,
      122,  139, 1501, 1507,   53, 1500, 1552, 1576, 1496, 1548,
      178,  188,  195,  200, 1576,  205, 1576, 1536,  138, 1517,
     1515, 1529, 1522, 1529, 1576, 1513, 1515, 1512, 1517, 1526,
     1500, 1507, 1510, 1518, 1518, 1504, 1576, 1514, 1516, 1509,
     1504, 1513, 1489, 1508, 1576, 1495, 1500, 1496, 1509,  205,

     1507, 1501, 1492, 1491, 1500, 1489, 1486, 1475, 1459,  178,
     1454, 1459,  100, 1466, 1457, 1469,  171, 1456, 1446, 1448,
     1465, 1460,  129, 1442, 1462, 1447, 1447, 1441, 1441,  166,
      167,  188, 1445,  186, 1444, 1452, 1436, 1445, 1433, 1431,
     1433, 1449,  177, 1448, 1430, 1432, 1432, 1443,  121, 1439,
     1441, 1441, 1422, 1416, 1421, 1422, 1432, 1420, 1431, 1429,
     1421, 1418, 1416, 1409, 1576,  234, 1448, 1449, 1440, 1438,
     1446, 1449, 1435, 1437, 1576, 1428, 1420, 1440, 1422,  222,
     1424, 1416, 1436, 1576, 1431, 1420, 1437, 1422, 1422, 1430,
      208, 1576, 1416, 1576, 1428, 1428, 1427, 1576, 1429, 1421,

     1576, 1576, 1411, 1418, 1407, 1392, 1411, 1388, 1391, 1381,
     1376, 1389, 1372, 1377, 1384, 1367, 1374, 1371,  188, 1370,
     1376, 1364, 1360, 1382, 1376, 1375, 1576, 1366, 1376, 1357,
     1356, 1576, 1354, 1369, 1368, 1358, 1356, 1366, 1368, 1353,
     1362, 1357, 1360, 1359, 1358, 1355, 1345, 1354, 1350, 1339,
     1352, 1351, 1341, 1334, 1343, 1345, 1330, 1337, 1327, 1330,
     1331, 1330, 1334, 1324, 1338, 1342, 1336, 1335, 1338, 1315,
     1325, 1332, 1322, 1333, 1348, 1346, 1354, 1576, 1576, 1339,
     1338, 1340, 1345, 1321, 1328, 1324,  231, 1335, 1339, 1338,
     1341,  239, 1332, 1319, 1576, 1332, 1576, 1576, 1324, 1314,

     1296, 1330, 1312, 1576, 1335,  225, 1317, 1330, 1319, 1324,
     1294, 1290, 1295, 1290, 1299, 1292, 1277, 1284, 1294, 1292,
     1295, 1281, 1279, 1284, 1287, 1282, 1287, 1288,  220, 1286,
     1273, 1282, 1280, 1283, 1283, 1268, 1261, 1262, 1265, 1275,
     1256,  236, 1264, 1257, 1576, 1254, 1576, 1576, 1255, 1263,
     1250, 1264, 1254, 1263, 1576, 1255, 1261, 1576, 1260, 1259,
     1244, 1257, 1256, 1255, 1250, 1256, 1576, 1236, 1255, 1243,
     1254, 1576, 1233,  214, 1576, 1237, 1576, 1239, 1252, 1273,
     1576, 1576, 1576, 1259, 1576, 1230, 1576, 1254, 1270,  236,
     1266, 1254, 1255, 1249, 1252, 1260, 1245, 1576, 1249, 1236,

     1242, 1216, 1218, 1237, 1225, 1255, 1255, 1256, 1576, 1239,
     1226, 1248, 1199, 1219, 1576, 1220, 1576, 1219, 1211, 1206,
     1217, 1199, 1197, 1210, 1193, 1206, 1209, 1197, 1205, 1195,
     1189, 1205, 1205, 1204, 1576, 1186, 1191,  222, 1201, 1195,
     1194, 1196, 1190, 1177, 1195, 1190, 1194, 1168, 1177, 1169,
     1176, 1169, 1183, 1183, 1576, 1576, 1167, 1182, 1576, 1164,
     1169, 1164, 1166, 1156, 1178, 1160, 1173, 1171, 1170, 1169,
     1168, 1157, 1148, 1161, 1180, 1183, 1576, 1146, 1168, 1178,
     1175,  247, 1184, 1183, 1183, 1167, 1174, 1169, 1178, 1169,
     1163, 1576, 1136, 1132, 1173, 1142, 1173, 1169, 1168, 1576,

     1131, 1171, 1129, 1139, 1131, 1121, 1137, 1140, 1121, 1576,
     1576, 1126, 1123, 1576, 1116, 1128, 1576, 1131, 1108, 1120,
     1112, 1117, 1128, 1576, 1107,  228, 1106, 1120,  235, 1117,
     1111, 1105, 1121, 1096, 1120, 1576, 1107, 1101, 1098, 1576,
     1098, 1110, 1576, 1108, 1095, 1576, 1112, 1091, 1096, 1089,
     1576, 1108, 1102, 1088, 1100, 1104, 1097, 1085, 1101, 1083,
     1081, 1576, 1072, 1115, 1117, 1094, 1107, 1106, 1104, 1108,
     1111, 1089, 1088, 1099, 1576, 1098, 1092, 1097, 1090, 1084,
     1072, 1064, 1576, 1067, 1094, 1576, 1576, 1062, 1091, 1067,
     1576, 1069, 1053, 1052,  217, 1046, 1576, 1066, 1060, 1576,

     1063, 1053, 1061, 1060, 1059, 1043, 1058, 1058, 1039, 1058,
     1046, 1051, 1038, 1041,  243, 1053, 1035, 1047, 1050, 1047,
     1576,  229, 1048, 1027, 1022, 1046, 1027, 1026, 1576,  249,
     1034, 1037, 1576,  238, 1029, 1022, 1576, 1026, 1018, 1016,
     1056, 1014, 1014, 1027, 1576, 1576,   16,  106,  154,  152,
      174,  218,  277,  241,  249,  256,  274,  280,  284,  274,
      257, 1576,  258, 1576,  246, 1576, 1576,  265,  261,  259,
      265,  262, 1576, 1576,  257, 1576,  270, 1576, 1576, 1576,
      269,  274,  261,  275,  255,  267,  261,  276,  278,  263,
      266,  269,  281, 1576,  274,  283,  274,  281,  277,  291,

      279,  289, 1576,  294,  293,  282,  293,  298,  285,  282,
      288,  288, 1576,  295,  291, 1576,  306,  320,  308, 1576,
      292,  302, 1576,  327,  326,  314,  322,  341,  342,  344,
      345,  321, 1576, 1576,  339,  338,  347,  307,  312,  307,
      313,  310, 1576,  324,  324,  318, 1576,  333,  334,  317,
      324,  336,  319,  334,  335,  321,  333,  338,  325,  344,
      341, 1576,  334,  335,  346,  338,  348,  335,  340,  351,
      339,  344,  341,  345,  354,  346,  342,  361,  359,  359,
      361,  354,  372,  356, 1576,  343,  370,  393,  392,  390,
      381,  383,  384,  385,  396,  395, 1576, 1576, 1576,  380,

     1576,  368, 1576,  363,  376, 1576,  380,  405,  386,  383,
      387,  387,  371,  378,  378,  375,  380,  371,  393, 1576,
      385,  394,  395,  392, 1576,  381,  398,  383,  397,  391,
      387,  392,  395, 1576, 1576,  403,  406,  394,  408,  405,
     1576,  406,  411,  434,  418,  444,  445,  433,  429,  430,
      431,  432,  451, 1576,  414,  416, 1576,  409,  413,  446,
      412,  431,  422,  417, 1576,  417,  426,  418, 1576,  425,
     1576,  439,  426,  424,  417,  443, 1576,  432,  445,  429,
      440,  437,  447,  439, 1576, 1576,  440,  427,  428,  437,
      481,  474,  465,  466,  473,  470,  471,  472,  473,  472,

      461,  442, 1576,  447,  469,  461,  450,  467,  468,  473,
      470,  467,  474,  464,  458, 1576,  475,  469,  482, 1576,
     1576, 1576,  478,  475,  460, 1576,  481,  482, 1576,  495,
      514,  497,  498,  492,  493,  494,  495,  496,  504, 1576,
      498,  498,  491,  486,  496, 1576,  498,  482,  491,  503,
     1576,  503,  488,  491,  501,  510,  493,  501,  498,  497,
      498,  524,  525,  528,  529,  544,  537,  541,  539,  543,
      537,  517,  518,  517,  518,  527,  521,  532, 1576,  519,
      539, 1576, 1576,  514,  529, 1576, 1576,  534, 1576, 1576,
      552,  551,  545,  546,  572,  573,  574,  575,  568,  577,

      571,  579,  572,  556,  548,  549,  539, 1576,  555, 1576,
      543, 1576,  545,  558,  548,  565,  566,  576,  589,  578,
      577,  578,  579,  579,  587,  581,  585,  583,  591,  597,
      567,  555,  577,  565, 1576,  563,  567,  579,  576,  607,
      590,  593,  604,  600,  602,  603,  610,  605,  612,  621,
      614,  609,  620,  619,  596,  601,  589, 1576,  593, 1576,
      608,  605,  602,  629,  631,  635,  639,  625,  626,  627,
      642,  620,  644,  647,  647,  626,  640,  653,  609,  612,
      616,  612, 1576,  627,  627,  648,  653,  644,  649,  639,
      646,  641,  642,  643,  662,  653,  664,  669,  666,  672,

      657,  664, 1576, 1576,  636,  648,  634,  647,  663,  670,
      679,  681,  684,  669,  677,  687,  684,  667,  675,  670,
      671,  674,  681,  695,  678,  700, 1576, 1576,  681,  662,
      683,  691,  694,  711,  712,  695,  714,  715,  716,  704,
      716,  711,  707,  721,  714,  721,  724,  707,  715,  725,
      725,  713,  727,  714,  695,  709,  718,  711,  733,  720,
      723,  729,  723,  731,  726,  730,  733,  734,  739,  733,
      732,  738,  740,  736,  747,  743,  744,  758,  755,  756,
      742,  760,  738,  738,  727,  762,  754,  755,  766,  767,
      769,  762,  772,  764,  759,  771,  778,  779,  766,  773,

      782,  776,  780,  778,  787,  780,  767,  793,  792,  776,
      796,  787,  782,  799,  800,  802,  757,  780,  795,  808,
      804,  785,  786, 1576,  795,  811,  793,  813, 1576,  802,
     1576,  805,  806,  818,  796,  811,  806,  820,  821,  815,
      821,  825,  816,  829,  810,  822,  829,  816,  819,  822,
      835,  825,  835,  840,  805,  798,  840,  826,  841,  848,
      842,  832,  843,  843,  845,  828,  854,  855,  849,  852,
      860,  843,  849,  853,  864,  855, 1576,  850,  857,  868,
      852,  866,  863,  868,  856,  872,  861,  866,  863,  867,
      875, 1576,  844,  863,  874,  866,  872,  872,  873, 1576,

      862,  885,  864,  876,  880,  881,  868,  886,  883,  888,
      878, 1576,  886,  874,  900,  897,  901,  901,  892,  888,
      893,  884,  889,  902,  897,  893,  898,  901, 1576,  901,
      898,  912,  917,  915,  899,  918,  903,  904,  910,  920,
      921,  924,  917,  925,  927,  912,  928,  924,  915,  933,
      925,  920,  920,  920, 1576,  927,  929,  941,  926,  936,
      934,  943,  937,  929,  930,  943,  946, 1576,  938,  945,
      945,  938, 1576, 1576,  942,  952,  932,  941, 1576, 1576,
      947,  952,  942,  958,  959,  964,  957,  964,  942, 1576,
     1576, 1576,  964,  961,  966,  963, 1576,  962, 1576,  962,

     1576,  963,  957,  965,  965,  963, 1576,  961,  967,  976,
     1576,  978,  963,  982, 1576,  985,  969,  977,  976,  987,
      967,  980,  988, 1576,  982,  994,  976,  992,  985,  993,
      987,  996,  984,  992, 1576, 1576, 1576,  986,  990, 1005,
      993, 1007,  997,  996,  994, 1576, 1007, 1576,  996, 1576,
      999, 1576, 1007, 1003,  997, 1005, 1014, 1001, 1007, 1005,
     1576, 1015,  998, 1021, 1007, 1023, 1576, 1023, 1014, 1576,
     1029, 1020, 1006, 1576, 1576, 1576, 1576, 1576, 1028, 1025,
     1019, 1030, 1031, 1019, 1021, 1033, 1028, 1017, 1025, 1026,
     1034, 1021, 1043, 1048, 1038, 1576, 1033, 1051, 1043, 1036,

     1576, 1045, 1576, 1576, 1071, 1074
    } ;

static yyconst short int yy_def[1507] =
    {   0,
     1504,    1, 1504, 1504, 1504, 1504, 1505, 1504, 1506, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1505, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504,    0, 1504, 1504
    } ;

static yyconst short int yy_nxt[1647] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   15,   16,   15,   15,   17,   18,
       19,   20,   21,   22,   23,   24,   25,    4,   26,   27,
       28,   29,   30,   31,   32,   33,   34,    4,   35,    4,
        4,    4,    4,    4,   36,   37,   38,   39,   40,   41,
       42,   43,   44,    4,    4,   45,   46,   47,   48,   49,
        4,   50,   51,   52,   53,   54,   55,    4,    4,   56,
       61,  722,   62,   62,   62,   62,   62,   61,   92,   63,
       63,   63,   63,   63,   64,   64,   64,   64,   64,   66,
       93,   62,   62,   62,   62,   62,   66,  161,   62,   62,

       62,   62,   62,   68,   72,  162,   67,   73,   69,   75,
       70,   76,   77,   78,   82,   83,   85,   74,   86,   88,
       90,   96,   79,   94,   80,  104,  723,   97,   89,   98,
       95,   91,  100,  108,  101,  109,  102,  112,  110,  111,
      105,  115,  118,  123,  131,  103,  119,  127,  116,  124,
      120,  113,  125,  128,  129,  117,  133,  114,  132,  121,
      135,  137,  140,  213,  214,  141,  134,  147,  142,  143,
      149,  258,  144,  168,  136,  145,  724,  138,  146,  169,
      139,  148,  259,  153,  225,  150,  151,  154,  152,  725,
      155,   64,   64,   64,   64,   64,  226,  156,  726,   66,

      157,   62,   62,   62,   62,   62,   66,  158,   63,   63,
       63,   63,   63,   64,   64,   64,   64,   64,  166,  166,
      166,  166,  166,  197,  208,  233,  198,  218,  219,  234,
      235,  236,  238,  241,  239,  237,  251,  324,  727,  407,
      209,  408,  287,  242,  252,  325,  210,  166,  166,  166,
      166,  166,  288,  300,  289,  445,  389,  471,  301,  395,
      396,  290,  390,  431,  432,  481,  482,  731,  525,  526,
      570,  527,  671,  472,  397,  697,  608,  571,  672,  446,
      528,  613,  711,  614,  529,  530,  609,  690,  732,  610,
      733,  691,  698,  705,  712,  706,  707,  728,  615,  734,

      735,  616,  736,  729,  737,  738,  739,  740,  741,  742,
      743,  708,  730,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  770,
      772,  773,  774,  776,  777,  778,  779,  780,  771,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  775,  793,  794,  795,  796,  797,  798,  799,  800,
      801,  802,  803,  804,  805,  806,  807,  808,  809,  810,
      811,  812,  813,  814,  815,  816,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  829,  830,

      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  848,  849,  847,  850,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  873,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  884,  885,  886,  887,  888,  889,  890,
      891,  892,  893,  894,  895,  896,  897,  898,  899,  900,
      901,  902,  903,  904,  905,  906,  907,  908,  909,  910,
      911,  912,  913,  914,  915,  916,  917,  918,  919,  920,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  930,

      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  998,  999, 1002, 1003, 1000,
      996, 1004, 1005, 1006, 1007, 1008, 1009, 1001, 1010,  997,
     1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,

     1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1054,
     1061, 1062, 1064, 1065, 1066, 1067, 1068, 1063, 1069, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1088, 1099, 1089, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131,

     1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1124, 1143,
     1146, 1147, 1144, 1148, 1149, 1139, 1145, 1150, 1151, 1140,
     1152, 1153, 1154, 1141, 1155, 1156, 1157, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183,
     1181, 1184, 1185, 1186, 1187, 1188, 1189, 1168, 1190, 1191,
     1192, 1193, 1182, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212,
     1213, 1216, 1217, 1218, 1219, 1221, 1222, 1210, 1223, 1224,
     1211, 1225, 1226, 1227, 1228, 1229, 1214, 1230, 1220, 1215,

     1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1255,
     1251, 1249, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1254, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1292,
     1293, 1294, 1295, 1287, 1296, 1299, 1297, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1307, 1308, 1291, 1298, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,

     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
     1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,

     1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1481,
     1482, 1483, 1484, 1485, 1480, 1486, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1503,   57,   60,  721,   60,  720,  719,  718,
      717,  716,  715,  714,  713,  710,  709,  704,  703,  702,
      701,  700,  699,  696,  695,  694,  693,  692,  689,  688,

      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  673,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  612,
      611,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,

      578,  577,  576,  575,  574,  573,  572,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  480,  479,
      478,  477,  476,  475,  474,  473,  470,  469,  468,  467,

      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  394,  393,  392,  391,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,

      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  257,  256,
      255,  254,  253,  250,  249,  248,  247,  246,  245,  244,

      243,  240,  232,  231,  230,  229,  228,  227,  224,  223,
      222,  221,  220,  217,  216,  215,  212,  211,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  167,  165,  164,   58,  163,  160,
      159,  130,  126,  122,  107,  106,   99,   87,   84,   81,
       71,   65,   59,   58, 1504,    3, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504
    } ;

static yyconst short int yy_chk[1647] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       11,  647,   11,   11,   11,   11,   11,   12,   28,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   13,   15,
       28,   15,   15,   15,   15,   15,   16,   55,   16,   16,

       16,   16,   16,   17,   19,   55,   16,   19,   17,   20,
       17,   20,   20,   20,   22,   22,   24,   19,   24,   26,
       27,   30,   20,   29,   20,   33,  648,   30,   26,   30,
       29,   27,   32,   36,   32,   36,   32,   37,   36,   36,
       33,   38,   39,   41,   45,   32,   39,   43,   38,   41,
       39,   37,   41,   43,   43,   38,   46,   37,   45,   39,
       47,   48,   49,  113,  113,   49,   46,   50,   49,   49,
       51,  149,   49,   69,   47,   49,  649,   48,   49,   69,
       48,   50,  149,   52,  123,   51,   51,   52,   51,  650,
       52,   61,   61,   61,   61,   61,  123,   52,  651,   62,

       52,   62,   62,   62,   62,   62,   63,   52,   63,   63,
       63,   63,   63,   64,   64,   64,   64,   64,   66,   66,
       66,   66,   66,  100,  110,  130,  100,  117,  117,  130,
      131,  131,  132,  134,  132,  131,  143,  219,  652,  306,
      110,  306,  180,  134,  143,  219,  110,  166,  166,  166,
      166,  166,  180,  191,  180,  342,  287,  374,  191,  292,
      292,  180,  287,  329,  329,  390,  390,  654,  438,  438,
      482,  438,  595,  374,  292,  622,  526,  482,  595,  342,
      438,  529,  634,  529,  438,  438,  526,  615,  655,  526,
      656,  615,  622,  630,  634,  630,  630,  653,  529,  657,

      658,  529,  659,  653,  660,  661,  663,  665,  668,  669,
      670,  630,  653,  671,  672,  675,  677,  681,  682,  683,
      684,  685,  686,  687,  688,  689,  690,  691,  692,  693,
      695,  696,  697,  698,  699,  700,  701,  702,  704,  705,
      706,  707,  708,  709,  710,  711,  712,  714,  705,  715,
      717,  718,  719,  721,  722,  724,  725,  726,  727,  728,
      729,  708,  730,  731,  732,  735,  736,  737,  738,  739,
      740,  741,  742,  744,  745,  746,  748,  749,  750,  751,
      752,  753,  754,  755,  756,  757,  758,  759,  760,  761,
      763,  764,  765,  766,  767,  768,  769,  770,  771,  772,

      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  786,  787,  788,  789,  790,  791,  789,  792,
      793,  794,  795,  796,  800,  802,  804,  805,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  821,  822,  823,  824,  826,  827,  828,  829,  830,
      831,  832,  833,  836,  837,  838,  839,  840,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      855,  856,  858,  859,  860,  861,  862,  863,  864,  866,
      867,  868,  870,  872,  873,  874,  875,  876,  878,  879,
      880,  881,  882,  883,  884,  887,  888,  889,  890,  891,

      892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
      902,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  917,  918,  919,  923,  924,  925,  927,
      928,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  941,  942,  943,  944,  945,  947,  948,  949,  950,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  968,  969,  970,  968,
      966,  971,  972,  973,  974,  975,  976,  968,  977,  966,
      978,  980,  981,  984,  985,  988,  991,  992,  993,  994,
      995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,

     1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1030,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1039, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
     1069, 1070, 1071, 1072, 1073, 1074, 1065, 1075, 1065, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1108, 1109,

     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1100, 1117,
     1118, 1119, 1117, 1120, 1121, 1116, 1117, 1122, 1123, 1116,
     1124, 1125, 1126, 1116, 1129, 1130, 1131, 1132, 1133, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1153, 1155, 1156, 1157, 1158, 1159, 1160, 1141, 1161, 1162,
     1163, 1164, 1153, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1180, 1189, 1190,
     1180, 1191, 1192, 1193, 1194, 1195, 1182, 1196, 1186, 1182,

     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217,
     1216, 1214, 1216, 1216, 1218, 1219, 1220, 1221, 1222, 1223,
     1225, 1226, 1227, 1228, 1230, 1232, 1233, 1216, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1251, 1259, 1261, 1260, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1254, 1260, 1271, 1272,
     1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294,

     1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
     1327, 1328, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1356, 1357, 1358,
     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1369,
     1370, 1371, 1372, 1375, 1376, 1377, 1378, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1393, 1394, 1395, 1396,
     1398, 1400, 1402, 1403, 1404, 1405, 1406, 1408, 1409, 1410,

     1412, 1413, 1414, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1447,
     1449, 1451, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
     1462, 1463, 1464, 1465, 1466, 1468, 1469, 1471, 1472, 1473,
     1479, 1480, 1481, 1482, 1472, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1497, 1498,
     1499, 1500, 1502, 1505, 1506,  644, 1506,  643,  642,  641,
      640,  639,  638,  636,  635,  632,  631,  628,  627,  626,
      625,  624,  623,  620,  619,  618,  617,  616,  614,  613,

      612,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  599,  598,  596,  594,  593,  592,  590,  589,
      588,  585,  584,  582,  581,  580,  579,  578,  577,  576,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  550,  549,  548,  547,  545,  544,  542,  541,
      539,  538,  537,  535,  534,  533,  532,  531,  530,  528,
      527,  525,  523,  522,  521,  520,  519,  518,  516,  515,
      513,  512,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  499,  498,  497,  496,  495,  494,  493,  491,  490,

      489,  488,  487,  486,  485,  484,  483,  481,  480,  479,
      478,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  458,  457,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  437,  436,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  416,  414,  413,  412,  411,
      410,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  397,  396,  395,  394,  393,  392,  391,  389,  388,
      386,  384,  380,  379,  378,  376,  373,  371,  370,  369,

      368,  366,  365,  364,  363,  362,  361,  360,  359,  357,
      356,  354,  353,  352,  351,  350,  349,  346,  344,  343,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  305,  303,  302,  301,  300,  299,
      296,  294,  293,  291,  290,  289,  288,  286,  285,  284,
      283,  282,  281,  280,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,

      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  231,
      230,  229,  228,  226,  225,  224,  223,  222,  221,  220,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  200,  199,  197,  196,
      195,  193,  190,  189,  188,  187,  186,  185,  183,  182,
      181,  179,  178,  177,  176,  174,  173,  172,  171,  170,
      169,  168,  167,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  148,  147,
      146,  145,  144,  142,  141,  140,  139,  138,  137,  136,

      135,  133,  129,  128,  127,  126,  125,  124,  122,  121,
      120,  119,  118,  116,  115,  114,  112,  111,  109,  108,
      107,  106,  105,  104,  103,  102,  101,   99,   98,   97,
       96,   94,   93,   92,   91,   90,   89,   88,   86,   85,
       84,   83,   82,   81,   80,   79,   78,   77,   76,   74,
       73,   72,   71,   70,   68,   60,   59,   57,   56,   54,
       53,   44,   42,   40,   35,   34,   31,   25,   23,   21,
       18,   14,    8,    7,    3, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,

     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "loader.l"
#define INITIAL 0
#line 3 "loader.l"
/* Copyright (c) 2006-2011, Stefan Eilemann <eile@equalizergraphics.com> 
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 2.1 as published
 * by the Free Software Foundation.
 *  
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "compound.h"
#include "equalizers/loadEqualizer.h"
#include "equalizers/treeEqualizer.h"

#include "parser.hpp"

#include <co/base/os.h>
#include <stdlib.h>

#define yyerror eqLoader_error
#define yylineno eqLoader_lineno
#define yylex eqLoader_lex

#ifdef WIN32_API
#  include <io.h>
#  define isatty _isatty
#endif
#pragma warning(disable: 4267)

int yylineno = 0;
const char* yyinString = 0;

void yyerror( const char *errmsg );
void yyerror( const char *errmsg )
{
    EQERROR << "Parse error: '" << errmsg << "', line " << yylineno+1
            << " at '" << yytext << "'" << std::endl;
    YY_FLUSH_BUFFER;
}

/* Override YY_INPUT to read from a char* if specified. YY_INPUT_FILE is C&P 
 * from the generated YY_INPUT */
#define YY_INPUT_FILE( buf, result, max_size )              \
    if ( ((result = fread( buf, 1, max_size, yyin )) == 0)  \
           && ferror( yyin ) )                              \
        YY_FATAL_ERROR( "input in flex scanner failed" );

#define YY_INPUT( buf, result, max_size )                      \
    if( yyinString )                                           \
    {                                                          \
        result = EQ_MIN( (size_t)(max_size), strlen( yyinString )); \
        if( result )                                           \
            memcpy( buf, yyinString, result );                 \
        yyinString += result;                                  \
    }                                                          \
    else                                                       \
    {                                                          \
        YY_INPUT_FILE( buf, result, max_size );                \
    }
#define YY_NO_UNPUT 1
#line 1295 "D:/Workspace/3rdparty/equalizer-win-x86-vs9/libs/server/lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 73 "loader.l"


#line 1449 "D:/Workspace/3rdparty/equalizer-win-x86-vs9/libs/server/lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1505 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1576 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 75 "loader.l"
{ return EQTOKEN_HEADER; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "loader.l"
{ return EQTOKEN_ASCII; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 77 "loader.l"
{ return EQTOKEN_GLOBAL; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "loader.l"
{ return EQTOKEN_CONNECTION_SATTR_HOSTNAME; }
	YY_BREAK
/* Deprecated */
case 5:
YY_RULE_SETUP
#line 80 "loader.l"
{ return EQTOKEN_NODE_SATTR_LAUNCH_COMMAND; }
	YY_BREAK
/* Deprecated */
case 6:
YY_RULE_SETUP
#line 82 "loader.l"
{ return EQTOKEN_NODE_CATTR_LAUNCH_COMMAND_QUOTE; }
	YY_BREAK
/* Deprecated */
case 7:
YY_RULE_SETUP
#line 84 "loader.l"
{ return EQTOKEN_NODE_IATTR_LAUNCH_TIMEOUT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_TYPE; }
	YY_BREAK
/* Deprecated */
case 9:
YY_RULE_SETUP
#line 87 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_PORT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_PORT; }
	YY_BREAK
/* Deprecated */
case 11:
YY_RULE_SETUP
#line 90 "loader.l"
{ return EQTOKEN_CONNECTION_SATTR_FILENAME; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 91 "loader.l"
{ return EQTOKEN_CONNECTION_SATTR_FILENAME; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_BANDWIDTH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "loader.l"
{ return EQTOKEN_CONFIG_FATTR_EYE_BASE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 94 "loader.l"
{ return EQTOKEN_CONFIG_IATTR_ROBUSTNESS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 95 "loader.l"
{ return EQTOKEN_NODE_SATTR_LAUNCH_COMMAND; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 96 "loader.l"
{ return EQTOKEN_NODE_CATTR_LAUNCH_COMMAND_QUOTE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 97 "loader.l"
{ return EQTOKEN_NODE_IATTR_THREAD_MODEL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 98 "loader.l"
{ return EQTOKEN_NODE_IATTR_LAUNCH_TIMEOUT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 99 "loader.l"
{ return EQTOKEN_NODE_IATTR_HINT_STATISTICS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 100 "loader.l"
{ return EQTOKEN_PIPE_IATTR_HINT_THREAD; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "loader.l"
{ return EQTOKEN_PIPE_IATTR_HINT_CUDA_GL_INTEROP; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_STEREO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_DOUBLEBUFFER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_FULLSCREEN;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_DECORATION;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_SWAPSYNC; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_DRAWABLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_STATISTICS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "loader.l"
{return EQTOKEN_WINDOW_IATTR_HINT_SCREENSAVER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_ALPHA; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_DEPTH; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_STENCIL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_ACCUM; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_ACCUM_ALPHA; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_SAMPLES; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "loader.l"
{ return EQTOKEN_CHANNEL_IATTR_HINT_STATISTICS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "loader.l"
{ return EQTOKEN_CHANNEL_IATTR_HINT_SENDTOKEN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_MODE; } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_ANAGLYPH_LEFT_MASK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_ANAGLYPH_RIGHT_MASK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_UPDATE_FOV; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_HINT_OFFSET; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 124 "loader.l"
{ return EQTOKEN_SERVER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 125 "loader.l"
{ return EQTOKEN_CONFIG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 126 "loader.l"
{ return EQTOKEN_APPNODE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 127 "loader.l"
{ return EQTOKEN_NODE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 128 "loader.l"
{ return EQTOKEN_PIPE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 129 "loader.l"
{ return EQTOKEN_WINDOW; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 130 "loader.l"
{ return EQTOKEN_ATTRIBUTES; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 131 "loader.l"
{ return EQTOKEN_HINT_DECORATION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 132 "loader.l"
{ return EQTOKEN_HINT_DOUBLEBUFFER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 133 "loader.l"
{ return EQTOKEN_HINT_FULLSCREEN; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 134 "loader.l"
{ return EQTOKEN_HINT_STATISTICS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 135 "loader.l"
{ return EQTOKEN_HINT_SENDTOKEN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 136 "loader.l"
{ return EQTOKEN_HINT_STEREO; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 137 "loader.l"
{ return EQTOKEN_HINT_SWAPSYNC; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 138 "loader.l"
{ return EQTOKEN_HINT_DRAWABLE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 139 "loader.l"
{ return EQTOKEN_HINT_THREAD; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 140 "loader.l"
{ return EQTOKEN_HINT_CUDA_GL_INTEROP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 141 "loader.l"
{ return EQTOKEN_HINT_SCREENSAVER; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 142 "loader.l"
{ return EQTOKEN_PLANES_ALPHA; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 143 "loader.l"
{ return EQTOKEN_PLANES_COLOR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 144 "loader.l"
{ return EQTOKEN_PLANES_DEPTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 145 "loader.l"
{ return EQTOKEN_PLANES_STENCIL; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 146 "loader.l"
{ return EQTOKEN_PLANES_ACCUM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 147 "loader.l"
{ return EQTOKEN_PLANES_ACCUM_ALPHA; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 148 "loader.l"
{ return EQTOKEN_PLANES_SAMPLES; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 149 "loader.l"
{ return EQTOKEN_ON; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 150 "loader.l"
{ return EQTOKEN_OFF; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 151 "loader.l"
{ return EQTOKEN_AUTO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 152 "loader.l"
{ return EQTOKEN_FASTEST; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 153 "loader.l"
{ return EQTOKEN_NICEST; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 154 "loader.l"
{ return EQTOKEN_QUAD; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 155 "loader.l"
{ return EQTOKEN_ANAGLYPH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 156 "loader.l"
{ return EQTOKEN_ANAGLYPH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 157 "loader.l"
{ return EQTOKEN_PASSIVE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 158 "loader.l"
{ return EQTOKEN_RED; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 159 "loader.l"
{ return EQTOKEN_GREEN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 160 "loader.l"
{ return EQTOKEN_BLUE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 161 "loader.l"
{ return EQTOKEN_HORIZONTAL; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 162 "loader.l"
{ return EQTOKEN_VERTICAL; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 163 "loader.l"
{ return EQTOKEN_DPLEX; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "loader.l"
{ return EQTOKEN_DFR; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 165 "loader.l"
{ return EQTOKEN_DDS; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 166 "loader.l"
{ return EQTOKEN_FRAMERATE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 167 "loader.l"
{ return EQTOKEN_CHANNEL; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 168 "loader.l"
{ return EQTOKEN_OBSERVER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 169 "loader.l"
{ return EQTOKEN_LAYOUT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "loader.l"
{ return EQTOKEN_VIEW; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "loader.l"
{ return EQTOKEN_CANVAS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "loader.l"
{ return EQTOKEN_SEGMENT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "loader.l"
{ return EQTOKEN_COMPOUND; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 174 "loader.l"
{ return EQTOKEN_LOADBALANCER; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 175 "loader.l"
{ return EQTOKEN_DFREQUALIZER; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 176 "loader.l"
{ return EQTOKEN_FRAMERATEEQUALIZER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "loader.l"
{ return EQTOKEN_LOADEQUALIZER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 178 "loader.l"
{ return EQTOKEN_TREEEQUALIZER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "loader.l"
{ return EQTOKEN_MONITOREQUALIZER; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 180 "loader.l"
{ return EQTOKEN_VIEWEQUALIZER; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 181 "loader.l"
{ return EQTOKEN_DAMPING; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 182 "loader.l"
{ return EQTOKEN_CONNECTION; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 183 "loader.l"
{ return EQTOKEN_NAME; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 184 "loader.l"
{ return EQTOKEN_TYPE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 185 "loader.l"
{ return EQTOKEN_TCPIP; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 186 "loader.l"
{ return EQTOKEN_SDP; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 187 "loader.l"
{ return EQTOKEN_IB; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 188 "loader.l"
{ return EQTOKEN_PIPE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 189 "loader.l"
{ return EQTOKEN_MCIP; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "loader.l"
{ return EQTOKEN_PGM; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "loader.l"
{ return EQTOKEN_RSP; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "loader.l"
{ return EQTOKEN_TEXTURE; } 
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 193 "loader.l"
{ return EQTOKEN_MEMORY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 194 "loader.l"
{ return EQTOKEN_FIXED; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 195 "loader.l"
{ return EQTOKEN_HMD; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 196 "loader.l"
{ return EQTOKEN_HOSTNAME; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 197 "loader.l"
{ return EQTOKEN_INTERFACE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 198 "loader.l"
{ return EQTOKEN_LAUNCH_COMMAND; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 199 "loader.l"
{ return EQTOKEN_LAUNCH_COMMAND_QUOTE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 200 "loader.l"
{ return EQTOKEN_LAUNCH_TIMEOUT; }
	YY_BREAK
/* Deprecated */
case 122:
YY_RULE_SETUP
#line 202 "loader.l"
{ return EQTOKEN_PORT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 203 "loader.l"
{ return EQTOKEN_PORT; }
	YY_BREAK
/* Deprecated */
case 124:
YY_RULE_SETUP
#line 205 "loader.l"
{ return EQTOKEN_FILENAME; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 206 "loader.l"
{ return EQTOKEN_FILENAME; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 207 "loader.l"
{ return EQTOKEN_TASK; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 208 "loader.l"
{ return EQTOKEN_EYE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 209 "loader.l"
{ return EQTOKEN_EYE_BASE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 210 "loader.l"
{ return EQTOKEN_ROBUSTNESS; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 211 "loader.l"
{ return EQTOKEN_BUFFER; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 212 "loader.l"
{ return EQTOKEN_CLEAR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "loader.l"
{ return EQTOKEN_DRAW; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "loader.l"
{ return EQTOKEN_CYCLOP; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 215 "loader.l"
{ return EQTOKEN_LEFT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 216 "loader.l"
{ return EQTOKEN_RIGHT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 217 "loader.l"
{ return EQTOKEN_ASSEMBLE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 218 "loader.l"
{ return EQTOKEN_READBACK; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 219 "loader.l"
{ return EQTOKEN_COLOR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 220 "loader.l"
{ return EQTOKEN_DEPTH; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 221 "loader.l"
{ return EQTOKEN_VIEWPORT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 222 "loader.l"
{ return EQTOKEN_DRAWABLE; } 
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 223 "loader.l"
{ return EQTOKEN_FBO_COLOR; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 224 "loader.l"
{ return EQTOKEN_FBO_DEPTH; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 225 "loader.l"
{ return EQTOKEN_FBO_STENCIL; }   
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 226 "loader.l"
{ return EQTOKEN_RANGE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 227 "loader.l"
{ return EQTOKEN_PERIOD; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 228 "loader.l"
{ return EQTOKEN_PHASE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 229 "loader.l"
{ return EQTOKEN_PIXEL; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 230 "loader.l"
{ return EQTOKEN_SUBPIXEL; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 231 "loader.l"
{ return EQTOKEN_BANDWIDTH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 232 "loader.l"
{ return EQTOKEN_DEVICE; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 233 "loader.l"
{ return EQTOKEN_WALL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 234 "loader.l"
{ return EQTOKEN_BOTTOM_LEFT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 235 "loader.l"
{ return EQTOKEN_BOTTOM_RIGHT; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 236 "loader.l"
{ return EQTOKEN_TOP_LEFT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 237 "loader.l"
{ return EQTOKEN_PROJECTION; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 238 "loader.l"
{ return EQTOKEN_ORIGIN; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 239 "loader.l"
{ return EQTOKEN_DISTANCE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 240 "loader.l"
{ return EQTOKEN_FOV; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 241 "loader.l"
{ return EQTOKEN_HPR; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 242 "loader.l"
{ return EQTOKEN_LATENCY; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 243 "loader.l"
{ return EQTOKEN_SWAPBARRIER; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 244 "loader.l"
{ return EQTOKEN_NVGROUP;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 245 "loader.l"
{ return EQTOKEN_NVBARRIER;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 246 "loader.l"
{ return EQTOKEN_OUTPUTFRAME; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 247 "loader.l"
{ return EQTOKEN_INPUTFRAME; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 248 "loader.l"
{ return EQTOKEN_STEREO_MODE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 249 "loader.l"
{ return EQTOKEN_STEREO_ANAGLYPH_LEFT_MASK; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 250 "loader.l"
{ return EQTOKEN_STEREO_ANAGLYPH_RIGHT_MASK; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 251 "loader.l"
{ return EQTOKEN_UPDATE_FOV; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 252 "loader.l"
{ return EQTOKEN_HINT_OFFSET; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 253 "loader.l"
{ return EQTOKEN_FBO; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 254 "loader.l"
{ return EQTOKEN_RGBA16F; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 255 "loader.l"
{ return EQTOKEN_RGBA32F; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 256 "loader.l"
{ return EQTOKEN_PBUFFER; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 257 "loader.l"
{ return EQTOKEN_THREAD_MODEL; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 258 "loader.l"
{ return EQTOKEN_ASYNC; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 259 "loader.l"
{ return EQTOKEN_ASYNC; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 260 "loader.l"
{ return EQTOKEN_DRAW_SYNC; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 261 "loader.l"
{ return EQTOKEN_DRAW_SYNC; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 262 "loader.l"
{ return EQTOKEN_LOCAL_SYNC; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 263 "loader.l"
{ return EQTOKEN_LOCAL_SYNC; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 264 "loader.l"
{ return EQTOKEN_MODE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 265 "loader.l"
{ return EQTOKEN_BOUNDARY; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 266 "loader.l"
{ return EQTOKEN_2D; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 267 "loader.l"
{ return EQTOKEN_ASSEMBLE_ONLY_LIMIT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 268 "loader.l"
{ return EQTOKEN_DB; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 269 "loader.l"
{ return EQTOKEN_ZOOM; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 270 "loader.l"
{ return EQTOKEN_MONO; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 271 "loader.l"
{ return EQTOKEN_STEREO; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 273 "loader.l"
{ return EQTOKEN_FLOAT; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 274 "loader.l"
{ return EQTOKEN_FLOAT; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 275 "loader.l"
{ return EQTOKEN_UNSIGNED; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 276 "loader.l"
{ return EQTOKEN_INTEGER; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 277 "loader.l"
{ return EQTOKEN_STRING; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 278 "loader.l"
{ return EQTOKEN_CHARACTER; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 280 "loader.l"
{ return *yytext; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 281 "loader.l"
{ ++yylineno; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 282 "loader.l"
{ ; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 283 "loader.l"
{ while( yyinput() != '\n' ) ; ++yylineno; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 285 "loader.l"
ECHO;
	YY_BREAK
#line 2544 "D:/Workspace/3rdparty/equalizer-win-x86-vs9/libs/server/lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1505 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1505 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1504);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 285 "loader.l"

